<?xml version="1.0" ?>
<launch>

    <!-- Gazebo arguments -->

    <!-- Gazebo arguments -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="verbose" default="false"/>
    <arg name="world_name" default="$(find velodyne_description)/world/example.world"/>

    <!-- Velodyne arguments -->
    <arg name="gpu" default="false"/>
    <arg name="organize_cloud" default="false"/>

    <!-- GPS arguments -->
    <arg name="gps_frame_id" default="gps_base_link"/>
    <arg name="gps_position_covariance" default="0.001"/>

    <!-- RViz arguments -->
    <arg name="rviz" default="true"/>

    <!-- Start gazebo and load the world -->
    <!-- <include file="$(find dlr_sensors)/launch/velodyne_example.launch" >
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="headless" value="$(arg headless)"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="world_name" value="$(arg world_name)"/>
    </include> -->

    <!-- Run the fake gps node -->
    <node pkg="dlr_sensors" type="fake_gps_sensor" name="gps" args="" output="screen" required="true" respawn="false">
    <!-- <node pkg="dlr_sensors" type="fake_gps_sensor_class_node.py" name="gps" args="" output="screen" required="true" respawn="false"> -->
        <param name="frame_id" value="$(arg gps_frame_id)"/>
        <param name="position_covariance" value="$(arg gps_position_covariance)"/>
    </node>

    <node pkg="dlr_sensors" type="fake_imu_sensor" name="imu" args="" output="screen" required="true" respawn="false"/>

    <!-- Publish static transforms -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="vessel_gps_base_link_broadcaster" args="1 0 0.3 0 0 0 1 vessel_base_link gps_base_link" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="vessel_imu_base_link_broadcaster" args="0 0 0.3 0 0 0 1 vessel_base_link imu_base_link" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="vessel_another_frame_base_link_broadcaster" args="-1 1 0.5 1.2 0.1 -0.1 vessel_base_link another_frame" />
</launch>